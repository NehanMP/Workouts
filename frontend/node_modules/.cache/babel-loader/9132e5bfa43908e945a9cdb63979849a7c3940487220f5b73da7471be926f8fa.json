{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useAuthContext } from './useAuthContext';\nexport const useLogin = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false); // It's better to start with false for isLoading\n  const {\n    dispatch\n  } = useAuthContext(); // Ensure this is a function call\n\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    const response = await fetch('/api/user/login', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // Correct 'header' to 'headers'\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const json = await response.json();\n    if (!response.ok) {\n      setIsLoading(false);\n      setError(json.error);\n      return; // Stop execution if there's an error\n    }\n\n    // Save the user to local storage\n    localStorage.setItem('user', JSON.stringify(json));\n\n    // Update the auth context\n    dispatch({\n      type: 'LOGIN',\n      payload: json\n    });\n    setIsLoading(false);\n  };\n  return {\n    login,\n    isLoading,\n    error\n  };\n};\n_s(useLogin, \"leglVsSbW4DJnC7nVdCyJFB0GD8=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","useAuthContext","useLogin","_s","error","setError","isLoading","setIsLoading","dispatch","login","email","password","response","fetch","method","headers","body","JSON","stringify","json","ok","localStorage","setItem","type","payload"],"sources":["D:/IIT/CrashCourses/Workouts/frontend/src/hooks/useLogin.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useAuthContext } from './useAuthContext';\r\n\r\nexport const useLogin = () => {\r\n    const [error, setError] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);  // It's better to start with false for isLoading\r\n    const { dispatch } = useAuthContext();  // Ensure this is a function call\r\n\r\n    const login = async (email, password) => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        const response = await fetch('/api/user/login', {\r\n            method: \"POST\",\r\n            headers: {'Content-Type': 'application/json'},  // Correct 'header' to 'headers'\r\n            body: JSON.stringify({email, password})\r\n        });\r\n        const json = await response.json();\r\n        \r\n        if (!response.ok) {\r\n            setIsLoading(false);\r\n            setError(json.error);\r\n            return;  // Stop execution if there's an error\r\n        }\r\n\r\n        // Save the user to local storage\r\n        localStorage.setItem('user', JSON.stringify(json));\r\n\r\n        // Update the auth context\r\n        dispatch({type: 'LOGIN', payload: json});\r\n\r\n        setIsLoading(false);\r\n    };\r\n    return { login, isLoading, error };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;EACpD,MAAM;IAAEQ;EAAS,CAAC,GAAGP,cAAc,CAAC,CAAC,CAAC,CAAE;;EAExC,MAAMQ,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACrCJ,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAAG;MAChDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACR,KAAK;QAAEC;MAAQ,CAAC;IAC1C,CAAC,CAAC;IACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MACdb,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAACc,IAAI,CAACf,KAAK,CAAC;MACpB,OAAO,CAAE;IACb;;IAEA;IACAiB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC;;IAElD;IACAX,QAAQ,CAAC;MAACe,IAAI,EAAE,OAAO;MAAEC,OAAO,EAAEL;IAAI,CAAC,CAAC;IAExCZ,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EACD,OAAO;IAAEE,KAAK;IAAEH,SAAS;IAAEF;EAAM,CAAC;AACtC,CAAC;AAAAD,EAAA,CA/BYD,QAAQ;EAAA,QAGID,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}